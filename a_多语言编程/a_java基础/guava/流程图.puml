@startuml
title get(key)方法

start

:segment;
note left: hash找到对应的segment，不同的segment里不用锁；
:referenceEntry;
note left: 在链表里从头开始寻找
if(referenceEntry != null) then (在缓存中找到，进一步判断值是否存在和过期)
   : value;
   note left: referenceEntry.getliveValue(now)
     if(value != null) then (缓存命中)
           : rencencyQueue记录命中;
           partition scheduleRefresh {
              if(是否要更新) then (设置了refresh && 过期 && valueReference().isLoading())
                partition lockedGetLoadingValueReference{
                    :referenceEntry;
                    note left: 在链表里从头开始寻找
                    if(referenceEntry != null) then (在缓存中找到，进一步判断值是否存在和过期)
                       : valueReference = e.getValueReference();
                       if(是否需要createNewReference) then (valueReference.isLoading() || 小于刷新间隔)
                          : return null;
                       else
                          : createNewReference;
                       endif
                    else
                       partition createNewReference {
                                        :e = newEntry(key, hash, first);
                                        : e.setValueReference(loadingValueReference);
                                        : table.set(index, e);
                                      }
                    endif
                 }
                partition loadAsync{
                       : 异步load新值;
                       : expand() if needed;
                       : 更新accessQueue 和writeQueue;
                       : 替换referenceEntry中的LoadingValueReference为普通的StrongValueReference;
                       : return newVal;
                }

              else
                : return oldValue;
              endif
           }
     else
        :valueReference;
        note right: referenceEntry.getValueReference()
           if(valueReference.isLoading()) then (true)
           : waitForLoadingValue;
           note right: 阻塞直到返回
           endif;
     endif;
else
  partition  lockedGetOrload{
        partition locked{
            :referenceEntry;
            note left: 在链表里从头开始寻找
            if(referenceEntry != null) then (在缓存中找到，进一步判断)
               : valueReference;
               note left: referenceEntry.getValueReference
               if(valueReference.isLoading()) then (其他操作正在loading这个key)
                  : 不进行createNewReference;
               else
                  : value;
                  note right: value = valueReference.get()
                  if(value ==null || referenceEntry isExpired) then
                    : 将entry放到通知队列中，等待通知;
                  else
                    : recordLockedRead;
                    note left: AccessQueue记录命中
                    : return value;
                  endif
               endif
            else
               partition createNewReference {
                 :e = newEntry(key, hash, first);
                 : e.setValueReference(loadingValueReference);
                 : table.set(index, e);
               }
            endif
        }
        partition syncload{
           : 同步阻塞load新值;
           : expand() if needed;
           : 更新accessQueue 和writeQueue;
           : 替换referenceEntry中的LoadingValueReference为普通的StrongValueReference;
           :return newVal;
        }

  }
endif;

stop
@enduml